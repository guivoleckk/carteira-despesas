{
  "stats": {
    "suites": 10,
    "tests": 34,
    "passes": 20,
    "pending": 0,
    "failures": 14,
    "start": "2023-04-12T06:23:16.736Z",
    "end": "2023-04-12T06:25:31.813Z",
    "duration": 135077,
    "testsRegistered": 34,
    "passPercent": 58.82352941176471,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e37450c0-0de2-49be-ac0d-bdd23580998a",
      "title": "",
      "fullFile": "cypress/e2e/_requirements/00.RunAll.cy.js",
      "file": "cypress/e2e/_requirements/00.RunAll.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6db7beee-2e14-47bf-82d8-9fbd5901773b",
          "title": "1 - Crie uma página inicial de login com os seguintes campos e características:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A rota para esta página deve ser '/'",
              "fullTitle": "1 - Crie uma página inicial de login com os seguintes campos e características: A rota para esta página deve ser '/'",
              "timedOut": null,
              "duration": 310,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.location('pathname').should('eq', '/');",
              "err": {},
              "uuid": "05bc969f-938f-4a95-a194-ff51096ea5f1",
              "parentUUID": "6db7beee-2e14-47bf-82d8-9fbd5901773b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Crie um local para que o usuário insira seu email e senha",
              "fullTitle": "1 - Crie uma página inicial de login com os seguintes campos e características: Crie um local para que o usuário insira seu email e senha",
              "timedOut": null,
              "duration": 94,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.EMAIL_INPUT_TEST_ID).should('exist');\ncy.getByTestId(_constants.PASSWORD_INPUT_TEST_ID).should('exist');",
              "err": {},
              "uuid": "b841f743-b30c-4708-bee1-1abb3f600def",
              "parentUUID": "6db7beee-2e14-47bf-82d8-9fbd5901773b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Crie um botão com o texto 'Entrar'",
              "fullTitle": "1 - Crie uma página inicial de login com os seguintes campos e características: Crie um botão com o texto 'Entrar'",
              "timedOut": null,
              "duration": 76,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.contains(/Entrar/i).should('exist');",
              "err": {},
              "uuid": "a882fcd2-069c-4584-93bb-4458c21144e1",
              "parentUUID": "6db7beee-2e14-47bf-82d8-9fbd5901773b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Realize as seguintes verificações nos campos de email, senha e botão:",
              "fullTitle": "1 - Crie uma página inicial de login com os seguintes campos e características: Realize as seguintes verificações nos campos de email, senha e botão:",
              "timedOut": null,
              "duration": 2551,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.contains(/Entrar/i).should('be.disabled');\ncy.getByTestId(_constants.EMAIL_INPUT_TEST_ID).type(_constants.INVALID_EMAIL_0);\ncy.getByTestId(_constants.PASSWORD_INPUT_TEST_ID).type(_constants.VALID_PASSWORD);\ncy.contains(/Entrar/i).should('be.disabled');\ncy.getByTestId(_constants.EMAIL_INPUT_TEST_ID).clear().type(_constants.INVALID_EMAIL_1);\ncy.getByTestId(_constants.PASSWORD_INPUT_TEST_ID).clear().type(_constants.VALID_PASSWORD);\ncy.contains(/Entrar/i).should('be.disabled');\ncy.getByTestId(_constants.EMAIL_INPUT_TEST_ID).clear().type(_constants.INVALID_EMAIL_2);\ncy.getByTestId(_constants.PASSWORD_INPUT_TEST_ID).clear().type(_constants.VALID_PASSWORD);\ncy.contains(/Entrar/i).should('be.disabled');\ncy.getByTestId(_constants.EMAIL_INPUT_TEST_ID).clear().type(_constants.INVALID_EMAIL_3);\ncy.getByTestId(_constants.PASSWORD_INPUT_TEST_ID).clear().type(_constants.VALID_PASSWORD);\ncy.contains(/Entrar/i).should('be.disabled');\ncy.getByTestId(_constants.EMAIL_INPUT_TEST_ID).clear().type(_constants.VALID_EMAIL);\ncy.getByTestId(_constants.PASSWORD_INPUT_TEST_ID).clear().type(_constants.INVALID_PASSWORD);\ncy.contains(/Entrar/i).should('be.disabled');\ncy.getByTestId(_constants.EMAIL_INPUT_TEST_ID).clear().type(_constants.VALID_EMAIL);\ncy.getByTestId(_constants.PASSWORD_INPUT_TEST_ID).clear().type(_constants.VALID_PASSWORD);\ncy.contains(/Entrar/i).should('not.be.disabled');",
              "err": {},
              "uuid": "9d39c26f-3240-4159-b7b4-764385432b04",
              "parentUUID": "6db7beee-2e14-47bf-82d8-9fbd5901773b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Salve o email no estado da aplicação, com a chave email, assim que o usuário logar.",
              "fullTitle": "1 - Crie uma página inicial de login com os seguintes campos e características: Salve o email no estado da aplicação, com a chave email, assim que o usuário logar.",
              "timedOut": null,
              "duration": 584,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helperFunctions.logInWithValidCredentials)();\ncy.window().its('store').invoke('getState').its('user.email').should('eq', _constants.VALID_EMAIL);",
              "err": {},
              "uuid": "e67fdc72-7a86-47c1-bab0-2a7d21e00c22",
              "parentUUID": "6db7beee-2e14-47bf-82d8-9fbd5901773b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A rota deve ser mudada para '/carteira' após o clique no botão.",
              "fullTitle": "1 - Crie uma página inicial de login com os seguintes campos e características: A rota deve ser mudada para '/carteira' após o clique no botão.",
              "timedOut": null,
              "duration": 577,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _helperFunctions.logInWithValidCredentials)();\ncy.location('pathname').should('eq', '/carteira');",
              "err": {},
              "uuid": "79e61de7-ad32-4c66-b9a6-9e1377890fc5",
              "parentUUID": "6db7beee-2e14-47bf-82d8-9fbd5901773b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05bc969f-938f-4a95-a194-ff51096ea5f1",
            "b841f743-b30c-4708-bee1-1abb3f600def",
            "a882fcd2-069c-4584-93bb-4458c21144e1",
            "9d39c26f-3240-4159-b7b4-764385432b04",
            "e67fdc72-7a86-47c1-bab0-2a7d21e00c22",
            "79e61de7-ad32-4c66-b9a6-9e1377890fc5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4192,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "87a4e11d-0f53-48de-8b60-b47e110342ed",
          "title": "2 - Crie um header para a página de carteira contendo as seguintes características:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Um elemento que exiba o email do usuário que fez login.",
              "fullTitle": "2 - Crie um header para a página de carteira contendo as seguintes características: Um elemento que exiba o email do usuário que fez login.",
              "timedOut": null,
              "duration": 580,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.EMAIL_FIELD_TEST_ID).should('contain', _constants.VALID_EMAIL);",
              "err": {},
              "uuid": "e2ac410e-2d29-4c16-959c-a02ea5af1004",
              "parentUUID": "87a4e11d-0f53-48de-8b60-b47e110342ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Crie um campo com a despesa total gerada pela lista de gastos.",
              "fullTitle": "2 - Crie um header para a página de carteira contendo as seguintes características: Crie um campo com a despesa total gerada pela lista de gastos.",
              "timedOut": null,
              "duration": 581,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('contain', '0');",
              "err": {},
              "uuid": "7109994c-16fa-4f87-af14-a35ea6bd8132",
              "parentUUID": "87a4e11d-0f53-48de-8b60-b47e110342ed",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Crie um campo que mostre que qual câmbio está sendo utilizado, que será neste caso 'BRL'",
              "fullTitle": "2 - Crie um header para a página de carteira contendo as seguintes características: Crie um campo que mostre que qual câmbio está sendo utilizado, que será neste caso 'BRL'",
              "timedOut": null,
              "duration": 577,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.HEADER_CURRENCY_FIELD_TEST_ID).should('contain', 'BRL');",
              "err": {},
              "uuid": "71378770-5404-44c1-8c75-42fed0e1d7c2",
              "parentUUID": "87a4e11d-0f53-48de-8b60-b47e110342ed",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e2ac410e-2d29-4c16-959c-a02ea5af1004",
            "7109994c-16fa-4f87-af14-a35ea6bd8132",
            "71378770-5404-44c1-8c75-42fed0e1d7c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1738,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9e16ccaf-b3ef-4f2a-8bf5-91c65e2dae92",
          "title": "3 - Desenvolva um formulário para adicionar uma despesa contendo as seguintes características:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Um campo para adicionar o valor da despesa",
              "fullTitle": "3 - Desenvolva um formulário para adicionar uma despesa contendo as seguintes características: Um campo para adicionar o valor da despesa",
              "timedOut": null,
              "duration": 585,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.VALUE_INPUT_TEST_ID).should('exist');",
              "err": {},
              "uuid": "0001c83d-0dda-43a5-91b7-adb26d78eb1f",
              "parentUUID": "9e16ccaf-b3ef-4f2a-8bf5-91c65e2dae92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Um campo para adicionar a descrição da despesa",
              "fullTitle": "3 - Desenvolva um formulário para adicionar uma despesa contendo as seguintes características: Um campo para adicionar a descrição da despesa",
              "timedOut": null,
              "duration": 576,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.DESCRIPTION_INPUT_TEST_ID).should('exist');",
              "err": {},
              "uuid": "6ba29c2b-719d-4204-86de-04073e82856a",
              "parentUUID": "9e16ccaf-b3ef-4f2a-8bf5-91c65e2dae92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Um campo para selecionar em qual moeda será registrada a despesa",
              "fullTitle": "3 - Desenvolva um formulário para adicionar uma despesa contendo as seguintes características: Um campo para selecionar em qual moeda será registrada a despesa",
              "timedOut": null,
              "duration": 688,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.CURRENCY_INPUT_TEST_ID).find('option').should('have.length', _constants.currenciesOptions.length);\ncy.wrap(_constants.currenciesOptions).each(currency => {\n  cy.getByTestId(_constants.CURRENCY_INPUT_TEST_ID).contains('option', currency).should('exist');\n});",
              "err": {},
              "uuid": "37ce1e33-a804-4c2b-a4fd-0d60c76ca239",
              "parentUUID": "9e16ccaf-b3ef-4f2a-8bf5-91c65e2dae92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "A chave currencies no estado global deve ser um array de siglas puxadas através de uma requisição à API",
              "fullTitle": "3 - Desenvolva um formulário para adicionar uma despesa contendo as seguintes características: A chave currencies no estado global deve ser um array de siglas puxadas através de uma requisição à API",
              "timedOut": null,
              "duration": 577,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('@mockFetch').should('be.calledWith', 'https://economia.awesomeapi.com.br/json/all');\ncy.window().its('store').invoke('getState').its('wallet.currencies').should('deep.equal', _constants.currenciesOptions);",
              "err": {},
              "uuid": "5387604c-c3df-4d22-bb93-e3ed01c3b25a",
              "parentUUID": "9e16ccaf-b3ef-4f2a-8bf5-91c65e2dae92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Um campo para selecionar qual método de pagamento será utilizado",
              "fullTitle": "3 - Desenvolva um formulário para adicionar uma despesa contendo as seguintes características: Um campo para selecionar qual método de pagamento será utilizado",
              "timedOut": null,
              "duration": 602,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.METHOD_INPUT_TEST_ID).find('option').should('have.length', _constants.methodOptions.length);\ncy.wrap(_constants.methodOptions).each(method => {\n  cy.getByTestId(_constants.METHOD_INPUT_TEST_ID).contains('option', method).should('exist');\n});",
              "err": {},
              "uuid": "f9bb04ee-6282-4423-9196-d9c2e0b53a80",
              "parentUUID": "9e16ccaf-b3ef-4f2a-8bf5-91c65e2dae92",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Um campo para selecionar uma categoria (tag) para a despesa.",
              "fullTitle": "3 - Desenvolva um formulário para adicionar uma despesa contendo as seguintes características: Um campo para selecionar uma categoria (tag) para a despesa.",
              "timedOut": null,
              "duration": 611,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.TAG_INPUT_TEST_ID).find('option').should('have.length', _constants.tagOptions.length);\ncy.wrap(_constants.tagOptions).each(tag => {\n  cy.getByTestId(_constants.TAG_INPUT_TEST_ID).contains('option', tag).should('exist');\n});",
              "err": {},
              "uuid": "df5b4305-ee11-4f33-814e-516b0b2dacc0",
              "parentUUID": "9e16ccaf-b3ef-4f2a-8bf5-91c65e2dae92",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0001c83d-0dda-43a5-91b7-adb26d78eb1f",
            "6ba29c2b-719d-4204-86de-04073e82856a",
            "37ce1e33-a804-4c2b-a4fd-0d60c76ca239",
            "5387604c-c3df-4d22-bb93-e3ed01c3b25a",
            "f9bb04ee-6282-4423-9196-d9c2e0b53a80",
            "df5b4305-ee11-4f33-814e-516b0b2dacc0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3639,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "961afe54-ba59-45fa-b821-a1087816dcbf",
          "title": "4 - Salve todas as informações do formulário no estado global",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Adiciona uma despesa e verifica se a soma de despesas do header foi atualizada e os inputs voltaram ao valor inicial",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Adiciona uma despesa e verifica se a soma de despesas do header foi atualizada e os inputs voltaram ao valor inicial",
              "timedOut": null,
              "duration": 11451,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const expense = {\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares'\n};\n(0, _helperFunctions.addExpense)(expense);\ncy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('have.text', '52.28');\ncy.getByTestId(_constants.VALUE_INPUT_TEST_ID).should('have.value', '');\ncy.getByTestId(_constants.DESCRIPTION_INPUT_TEST_ID).should('have.value', '');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected '<p>' to have text '52.28', but the text was '0.00'",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected '<p>' to have text '52.28', but the text was '0.00'\n    at Context.eval (webpack:///./cypress/e2e/_requirements/04.SaveExpensesForm.cy.js:34:40)",
                "diff": "- '0.00'\n+ '52.28'\n"
              },
              "uuid": "937ecdae-cb1a-40b5-b5e8-51649ee7b916",
              "parentUUID": "961afe54-ba59-45fa-b821-a1087816dcbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adiciona uma despesa e verifica se a despesa foi salva no estado global",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Adiciona uma despesa e verifica se a despesa foi salva no estado global",
              "timedOut": null,
              "duration": 11469,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const expense = {\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares'\n};\n(0, _helperFunctions.addExpense)(expense);\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', [_objectSpread(_objectSpread({}, expense), {}, {\n  id: 0,\n  exchangeRates: _data.mockData\n})]);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected [] to deeply equal [ Array(1) ]",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected [] to deeply equal [ Array(1) ]\n    at Context.eval (webpack:///./cypress/e2e/_requirements/04.SaveExpensesForm.cy.js:53:7)",
                "diff": "- []\n+ [ { value: '11',\n+     currency: 'USD',\n+     method: 'Cartão de crédito',\n+     tag: 'Lazer',\n+     description: 'Onze dólares',\n+     id: 0,\n+     exchangeRates: \n+      { USD: [Object],\n+        CAD: [Object],\n+        EUR: [Object],\n+        GBP: [Object],\n+        ARS: [Object],\n+        BTC: [Object],\n+        LTC: [Object],\n+        JPY: [Object],\n+        CHF: [Object],\n+        AUD: [Object],\n+        CNY: [Object],\n+        ILS: [Object],\n+        ETH: [Object],\n+        XRP: [Object],\n+        DOGE: [Object] } } ]\n"
              },
              "uuid": "15c5f723-228d-4c97-b96d-7d7968a99f67",
              "parentUUID": "961afe54-ba59-45fa-b821-a1087816dcbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verifica se a API é chamada a cada vez que o botão 'Adicionar despesa' é clicado",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Verifica se a API é chamada a cada vez que o botão 'Adicionar despesa' é clicado",
              "timedOut": null,
              "duration": 11470,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const expense = {\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares'\n};\ncy.get('@mockFetch').should('be.calledOnce');\n(0, _helperFunctions.addExpense)(expense);\ncy.get('@mockFetch').should('be.calledTwice');\n(0, _helperFunctions.addExpense)(expense);\ncy.get('@mockFetch').should('be.calledThrice');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected mockFetch to have been called exactly twice, but it was called once\n\n    The following calls were made:\n\n    mockFetch(\"https://economia.awesomeapi.com.br/json/all\") => {} at mockFetch (http://localhost:3000/__cypress/runner/cypress_runner.js:123891:26)",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected mockFetch to have been called exactly twice, but it was called once\n\n    The following calls were made:\n\n    at <unknown> (    mockFetch\"https://economia.awesomeapi.com.br/json/all\" => {} at mockFetch http://localhost:3000/__cypress/runner/cypress_runner.js:123891:26)\n    at Context.eval (webpack:///./cypress/e2e/_requirements/04.SaveExpensesForm.cy.js:75:25)",
                "diff": null
              },
              "uuid": "acf8c052-88bf-4054-8720-4d3352fbb9f3",
              "parentUUID": "961afe54-ba59-45fa-b821-a1087816dcbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Adiciona duas despesas e verifica se o estado global e header foram atualizados",
              "fullTitle": "4 - Salve todas as informações do formulário no estado global Adiciona duas despesas e verifica se o estado global e header foram atualizados",
              "timedOut": null,
              "duration": 11494,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const firstExpense = {\n  id: 0,\n  value: '11',\n  currency: 'USD',\n  method: 'Cartão de crédito',\n  tag: 'Lazer',\n  description: 'Onze dólares',\n  exchangeRates: _data.mockData\n};\n(0, _helperFunctions.addExpense)(firstExpense);\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', [firstExpense]);\nconst secondExpense = {\n  id: 1,\n  value: '20',\n  currency: 'EUR',\n  method: 'Cartão de débito',\n  tag: 'Trabalho',\n  description: 'Vinte euros',\n  exchangeRates: _data.mockData\n};\n(0, _helperFunctions.addExpense)(secondExpense);\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', [firstExpense, secondExpense]);\ncy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('have.text', '154.82');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected [] to deeply equal [ Array(1) ]",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected [] to deeply equal [ Array(1) ]\n    at Context.eval (webpack:///./cypress/e2e/_requirements/04.SaveExpensesForm.cy.js:97:7)",
                "diff": "- []\n+ [ { id: 0,\n+     value: '11',\n+     currency: 'USD',\n+     method: 'Cartão de crédito',\n+     tag: 'Lazer',\n+     description: 'Onze dólares',\n+     exchangeRates: \n+      { USD: [Object],\n+        CAD: [Object],\n+        EUR: [Object],\n+        GBP: [Object],\n+        ARS: [Object],\n+        BTC: [Object],\n+        LTC: [Object],\n+        JPY: [Object],\n+        CHF: [Object],\n+        AUD: [Object],\n+        CNY: [Object],\n+        ILS: [Object],\n+        ETH: [Object],\n+        XRP: [Object],\n+        DOGE: [Object] } } ]\n"
              },
              "uuid": "6ab1156e-63fe-45af-9c84-d71a7ef2578d",
              "parentUUID": "961afe54-ba59-45fa-b821-a1087816dcbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "937ecdae-cb1a-40b5-b5e8-51649ee7b916",
            "15c5f723-228d-4c97-b96d-7d7968a99f67",
            "acf8c052-88bf-4054-8720-4d3352fbb9f3",
            "6ab1156e-63fe-45af-9c84-d71a7ef2578d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 45884,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "14138c8a-6af9-4310-9661-243a51cfbc5f",
          "title": "5 - Desenvolva testes para atingir 60% de cobertura total da aplicação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cobertura de \"Statements\" total deverá ser maior ou igual a 60.",
              "fullTitle": "5 - Desenvolva testes para atingir 60% de cobertura total da aplicação Cobertura de \"Statements\" total deverá ser maior ou igual a 60.",
              "timedOut": null,
              "duration": 2546,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('getCoverage', (0, _getId.getId)()).its('total.statements.pct', {\n  timeout: 0\n}).should('be.gte', 60.00);",
              "err": {},
              "uuid": "8411bb90-673a-42bb-ba61-f963299a715e",
              "parentUUID": "14138c8a-6af9-4310-9661-243a51cfbc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cobertura de \"Functions\" total deverá ser maior ou igual a 60.",
              "fullTitle": "5 - Desenvolva testes para atingir 60% de cobertura total da aplicação Cobertura de \"Functions\" total deverá ser maior ou igual a 60.",
              "timedOut": null,
              "duration": 31,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('getCoverage', (0, _getId.getId)()).its('total.functions.pct', {\n  timeout: 0\n}).should('be.gte', 60.00);",
              "err": {},
              "uuid": "4736a8cb-08ec-4a0e-b193-63a886b6cc84",
              "parentUUID": "14138c8a-6af9-4310-9661-243a51cfbc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cobertura de \"Branches\" total deverá ser maior ou igual a 60.",
              "fullTitle": "5 - Desenvolva testes para atingir 60% de cobertura total da aplicação Cobertura de \"Branches\" total deverá ser maior ou igual a 60.",
              "timedOut": null,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('getCoverage', (0, _getId.getId)()).its('total.branches.pct', {\n  timeout: 0\n}).should('be.gte', 60.00);",
              "err": {},
              "uuid": "089b5b11-1367-49ab-9d40-9fd22a50a751",
              "parentUUID": "14138c8a-6af9-4310-9661-243a51cfbc5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cobertura de \"Lines\" total deverá ser maior ou igual a 60.",
              "fullTitle": "5 - Desenvolva testes para atingir 60% de cobertura total da aplicação Cobertura de \"Lines\" total deverá ser maior ou igual a 60.",
              "timedOut": null,
              "duration": 30,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.task('getCoverage', (0, _getId.getId)()).its('total.lines.pct', {\n  timeout: 0\n}).should('be.gte', 60.00);",
              "err": {},
              "uuid": "7b5b3a42-3554-48d0-bff5-22421690fe77",
              "parentUUID": "14138c8a-6af9-4310-9661-243a51cfbc5f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8411bb90-673a-42bb-ba61-f963299a715e",
            "4736a8cb-08ec-4a0e-b193-63a886b6cc84",
            "089b5b11-1367-49ab-9d40-9fd22a50a751",
            "7b5b3a42-3554-48d0-bff5-22421690fe77"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2614,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "bf0dcaaf-8993-4939-8281-4b1fba697671",
          "title": "6 - Desenvolva uma tabela com os gastos contendo as seguintes características:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A tabela deve possuir um cabeçalho com os campos Descrição, Tag, Método de pagamento, Valor, Moeda, Câmbio utilizado, Valor convertido e Moeda de conversão",
              "fullTitle": "6 - Desenvolva uma tabela com os gastos contendo as seguintes características: A tabela deve possuir um cabeçalho com os campos Descrição, Tag, Método de pagamento, Valor, Moeda, Câmbio utilizado, Valor convertido e Moeda de conversão",
              "timedOut": null,
              "duration": 715,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('th').should('have.length', _constants.tableHeaderList.length);\ncy.wrap(_constants.tableHeaderList).each(header => {\n  cy.get('th').contains(header);\n});",
              "err": {},
              "uuid": "06e879b4-14c9-4da1-845f-190e1563b1f7",
              "parentUUID": "bf0dcaaf-8993-4939-8281-4b1fba697671",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06e879b4-14c9-4da1-845f-190e1563b1f7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 715,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "779aac5e-9580-44c0-901d-10ebc09b36ab",
          "title": "7 - Implemente a lógica para que a tabela seja alimentada pelo estado da aplicação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "A tabela deve ser alimentada pelo estado da aplicação, que estará disponível na chave expenses que vem do reducer wallet.",
              "fullTitle": "7 - Implemente a lógica para que a tabela seja alimentada pelo estado da aplicação A tabela deve ser alimentada pelo estado da aplicação, que estará disponível na chave expenses que vem do reducer wallet.",
              "timedOut": null,
              "duration": 12321,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const expectedTableRows = [['Dez dólares', 'Trabalho', 'Cartão de débito', '10.00', 'Dólar Americano/Real Brasileiro', '4.75', '47.53', 'Real'], ['Cinco euros', 'Lazer', 'Cartão de crédito', '5.00', 'Euro/Real Brasileiro', '5.13', '25.63', 'Real']];\ncy.get('tbody tr').should('have.length', expectedTableRows.length);\ncy.get('tbody tr').each((row, index) => {\n  cy.wrap(expectedTableRows[index]).each(expectedValue => {\n    cy.get(row).find('td').contains(expectedValue);\n  });\n});",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `tbody tr`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `tbody tr`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/_requirements/07.ExpenseGlobalState.cy.js:24:23)",
                "diff": null
              },
              "uuid": "2582e821-bae6-47bd-a43b-90b6ba126b28",
              "parentUUID": "779aac5e-9580-44c0-901d-10ebc09b36ab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "2582e821-bae6-47bd-a43b-90b6ba126b28"
          ],
          "pending": [],
          "skipped": [],
          "duration": 12321,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4452be6a-e32c-421b-9fa6-df0083394010",
          "title": "8 - Crie um botão para deletar uma despesa da tabela contendo as seguintes características:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "O botão deve estar dentro do último item da linha da tabela e deve possuir `data-testid=\"delete-btn\"`",
              "fullTitle": "8 - Crie um botão para deletar uma despesa da tabela contendo as seguintes características: O botão deve estar dentro do último item da linha da tabela e deve possuir `data-testid=\"delete-btn\"`",
              "timedOut": null,
              "duration": 12365,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('tbody tr').first().find('td').last().find(`button[data-testid=\"${_constants.BTN_DELETE_TEST_ID}\"]`).should('exist');\ncy.getByTestId(_constants.BTN_DELETE_TEST_ID).should('have.length', 2);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `tbody tr`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `tbody tr`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/_requirements/08.DeleteExpense.cy.js:21:7)",
                "diff": null
              },
              "uuid": "cc350c48-58aa-4bc5-89a0-f24b11b0205b",
              "parentUUID": "4452be6a-e32c-421b-9fa6-df0083394010",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ao ser clicado, o botão deleta a linha da tabela, alterando o estado global.",
              "fullTitle": "8 - Crie um botão para deletar uma despesa da tabela contendo as seguintes características: Ao ser clicado, o botão deleta a linha da tabela, alterando o estado global.",
              "timedOut": null,
              "duration": 12405,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const expectedTableRow = ['Cinco euros', 'Lazer', 'Cartão de crédito', '5.00', 'Euro/Real Brasileiro', '5.13', '25.63', 'Real'];\ncy.getByTestId(_constants.BTN_DELETE_TEST_ID).first().click().should('not.exist');\nconst deleteBtn = 1;\ncy.get('tbody tr td').should('have.length', expectedTableRow.length + deleteBtn);\ncy.wrap(expectedTableRow).each(expectedValue => {\n  cy.get('tbody tr td').contains(expectedValue);\n});\nconst expectedExpenses = [_objectSpread(_objectSpread({}, _constants.initialExpenses[1]), {}, {\n  id: 1,\n  exchangeRates: _data.mockData\n})];\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', expectedExpenses);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `[data-testid=\"delete-btn\"]`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `[data-testid=\"delete-btn\"]`, but never found it.\n    at Context.eval (webpack:///./cypress/support/commands.js:27:62)",
                "diff": null
              },
              "uuid": "d9383078-638d-48c3-85d7-c41232344a71",
              "parentUUID": "4452be6a-e32c-421b-9fa6-df0083394010",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Ao clicar no botão para remover uma despesa, o valor correspondente deve ser subtraído e a despesa total deve ser atualizada no header",
              "fullTitle": "8 - Crie um botão para deletar uma despesa da tabela contendo as seguintes características: Ao clicar no botão para remover uma despesa, o valor correspondente deve ser subtraído e a despesa total deve ser atualizada no header",
              "timedOut": null,
              "duration": 12423,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('have.text', '73.16');\ncy.getByTestId(_constants.BTN_DELETE_TEST_ID).first().click();\ncy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('have.text', '25.63');\ncy.getByTestId(_constants.BTN_DELETE_TEST_ID).first().click();\ncy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('have.text', '0.00');",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: expected '<p>' to have text '73.16', but the text was '0.00'",
                "estack": "AssertionError: Timed out retrying after 10000ms: expected '<p>' to have text '73.16', but the text was '0.00'\n    at Context.eval (webpack:///./cypress/e2e/_requirements/08.DeleteExpense.cy.js:55:40)",
                "diff": "- '0.00'\n+ '73.16'\n"
              },
              "uuid": "46a8308c-9875-47c1-94cf-221a4a03f1e7",
              "parentUUID": "4452be6a-e32c-421b-9fa6-df0083394010",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "cc350c48-58aa-4bc5-89a0-f24b11b0205b",
            "d9383078-638d-48c3-85d7-c41232344a71",
            "46a8308c-9875-47c1-94cf-221a4a03f1e7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 37193,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2e0ac2cc-d4d2-49e3-b6ff-4cd28511d8a7",
          "title": "9 - Crie um botão para editar uma despesa da tabela contendo as seguintes características:",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "O botão deve estar dentro do último item da linha da tabela e deve possuir `data-testid=\"edit-btn\"`",
              "fullTitle": "9 - Crie um botão para editar uma despesa da tabela contendo as seguintes características: O botão deve estar dentro do último item da linha da tabela e deve possuir `data-testid=\"edit-btn\"`",
              "timedOut": null,
              "duration": 12391,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.get('tbody tr').first().find('td').last().find(`button[data-testid=\"${_constants.BTN_EDIT_TEST_ID}\"]`).should('exist');\ncy.getByTestId(_constants.BTN_EDIT_TEST_ID).should('have.length', 2);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `tbody tr`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `tbody tr`, but never found it.\n    at Context.eval (webpack:///./cypress/e2e/_requirements/09.EditExpense.cy.js:21:7)",
                "diff": null
              },
              "uuid": "12bd07e9-8321-453a-b6e6-8b4c9629ec9a",
              "parentUUID": "2e0ac2cc-d4d2-49e3-b6ff-4cd28511d8a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "O botão habilita um formulário para editar a linha da tabela ao ser clicado, após clicar em \"Editar despesa\" a despesa é atualizada e atualiza a soma de despesas no header.",
              "fullTitle": "9 - Crie um botão para editar uma despesa da tabela contendo as seguintes características: O botão habilita um formulário para editar a linha da tabela ao ser clicado, após clicar em \"Editar despesa\" a despesa é atualizada e atualiza a soma de despesas no header.",
              "timedOut": null,
              "duration": 12434,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.getByTestId(_constants.BTN_EDIT_TEST_ID).first().click();\ncy.contains(/Adicionar despesa/i).should('not.exist');\ncy.contains(/Editar despesa/i).should('exist');\n(0, _helperFunctions.editExpense)({\n  value: '200',\n  currency: 'CAD',\n  method: 'Dinheiro',\n  tag: 'Saúde',\n  description: 'Duzentos dólares canadenses'\n});\nconst expectedTableRow = ['Duzentos dólares canadenses', 'Saúde', 'Dinheiro', '200.00', 'Dólar Canadense/Real Brasileiro', '3.76', '751.18', 'Real'];\nconst deleteBtn = 1;\ncy.get('tbody tr').first().find('td').should('have.length', expectedTableRow.length + deleteBtn);\ncy.wrap(expectedTableRow).each(expectedValue => {\n  cy.get('tbody tr').first().find('td').contains(expectedValue);\n});\ncy.getByTestId(_constants.TOTAL_FIELD_TEST_ID).should('have.text', '776.81');\nconst expectedExpenses = [{\n  id: 0,\n  value: '200',\n  currency: 'CAD',\n  method: 'Dinheiro',\n  tag: 'Saúde',\n  description: 'Duzentos dólares canadenses',\n  exchangeRates: _data.mockData\n}, _objectSpread(_objectSpread({}, _constants.initialExpenses[1]), {}, {\n  id: 1,\n  exchangeRates: _data.mockData\n})];\ncy.window().its('store').invoke('getState').its('wallet.expenses').should('deep.equal', expectedExpenses);",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `[data-testid=\"edit-btn\"]`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `[data-testid=\"edit-btn\"]`, but never found it.\n    at Context.eval (webpack:///./cypress/support/commands.js:27:62)",
                "diff": null
              },
              "uuid": "089d5202-7ce8-406a-9fc5-45a53d6289c7",
              "parentUUID": "2e0ac2cc-d4d2-49e3-b6ff-4cd28511d8a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "12bd07e9-8321-453a-b6e6-8b4c9629ec9a",
            "089d5202-7ce8-406a-9fc5-45a53d6289c7"
          ],
          "pending": [],
          "skipped": [],
          "duration": 24825,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "72f88c74-afad-40be-b643-2f936c3db431",
          "title": "10 - Desenvolva testes para atingir 90% de cobertura total da aplicação",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cobertura de \"Statements\" total deverá ser maior ou igual a 90.",
              "fullTitle": "10 - Desenvolva testes para atingir 90% de cobertura total da aplicação Cobertura de \"Statements\" total deverá ser maior ou igual a 90.",
              "timedOut": null,
              "duration": 167,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.task('getCoverage', (0, _getId.getId)()).its('total.statements.pct', {\n  timeout: 0\n}).should('be.gte', 90.00);",
              "err": {
                "message": "AssertionError: Timed out retrying after 0ms: expected 77 to be at least 90",
                "estack": "AssertionError: Timed out retrying after 0ms: expected 77 to be at least 90\n    at Context.eval (webpack:///./cypress/e2e/_requirements/10.TestCoverage.cy.js:5:80)",
                "diff": "- 77\n+ 90\n"
              },
              "uuid": "bf761649-9e61-4f2a-bc7f-f0577695b66b",
              "parentUUID": "72f88c74-afad-40be-b643-2f936c3db431",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cobertura de \"Functions\" total deverá ser maior ou igual a 90.",
              "fullTitle": "10 - Desenvolva testes para atingir 90% de cobertura total da aplicação Cobertura de \"Functions\" total deverá ser maior ou igual a 90.",
              "timedOut": null,
              "duration": 103,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.task('getCoverage', (0, _getId.getId)()).its('total.functions.pct', {\n  timeout: 0\n}).should('be.gte', 90.00);",
              "err": {
                "message": "AssertionError: Timed out retrying after 0ms: expected 67.74 to be at least 90",
                "estack": "AssertionError: Timed out retrying after 0ms: expected 67.74 to be at least 90\n    at Context.eval (webpack:///./cypress/e2e/_requirements/10.TestCoverage.cy.js:9:79)",
                "diff": "- 67.74\n+ 90\n"
              },
              "uuid": "d2051c0c-cdbc-4974-b3e0-3abf6b41dd45",
              "parentUUID": "72f88c74-afad-40be-b643-2f936c3db431",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cobertura de \"Branches\" total deverá ser maior ou igual a 90.",
              "fullTitle": "10 - Desenvolva testes para atingir 90% de cobertura total da aplicação Cobertura de \"Branches\" total deverá ser maior ou igual a 90.",
              "timedOut": null,
              "duration": 125,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.task('getCoverage', (0, _getId.getId)()).its('total.branches.pct', {\n  timeout: 0\n}).should('be.gte', 90.00);",
              "err": {
                "message": "AssertionError: Timed out retrying after 0ms: expected 80 to be at least 90",
                "estack": "AssertionError: Timed out retrying after 0ms: expected 80 to be at least 90\n    at Context.eval (webpack:///./cypress/e2e/_requirements/10.TestCoverage.cy.js:13:78)",
                "diff": "- 80\n+ 90\n"
              },
              "uuid": "74eaef68-1dc6-492d-9f7c-1e935214b5ac",
              "parentUUID": "72f88c74-afad-40be-b643-2f936c3db431",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cobertura de \"Lines\" total deverá ser maior ou igual a 90.",
              "fullTitle": "10 - Desenvolva testes para atingir 90% de cobertura total da aplicação Cobertura de \"Lines\" total deverá ser maior ou igual a 90.",
              "timedOut": null,
              "duration": 107,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.task('getCoverage', (0, _getId.getId)()).its('total.lines.pct', {\n  timeout: 0\n}).should('be.gte', 90.00);",
              "err": {
                "message": "AssertionError: Timed out retrying after 0ms: expected 78.02 to be at least 90",
                "estack": "AssertionError: Timed out retrying after 0ms: expected 78.02 to be at least 90\n    at Context.eval (webpack:///./cypress/e2e/_requirements/10.TestCoverage.cy.js:17:75)",
                "diff": "- 78.02\n+ 90\n"
              },
              "uuid": "3aedaf89-8c42-4cdf-ad17-147005e27b7e",
              "parentUUID": "72f88c74-afad-40be-b643-2f936c3db431",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "bf761649-9e61-4f2a-bc7f-f0577695b66b",
            "d2051c0c-cdbc-4974-b3e0-3abf6b41dd45",
            "74eaef68-1dc6-492d-9f7c-1e935214b5ac",
            "3aedaf89-8c42-4cdf-ad17-147005e27b7e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 502,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}